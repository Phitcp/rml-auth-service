// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface RegisterOtpRequest {
  email: string;
}

export interface RegisterOtpResponse {
  email: string;
  otp: number;
}

export interface VerifyRegisterOtpRequest {
  otp: number;
  email: string;
}

export interface VerifyRegisterOtpResponse {
  slugId: string;
  username: string;
  email: string;
  accessToken: string;
  refreshToken: string;
  sessionId: string;
  role: string;
}

export interface LoginRequest {
  email: string;
  password: string;
}

export interface LoginResponse {
  accessToken: string;
  refreshToken: string;
  slugId: string;
  username: string;
  email: string;
  sessionId: string;
  role: string;
}

export interface RotateTokenRequest {
  userId: string;
  refreshToken: string;
  sessionId: string;
}

export interface RotateTokenResponse {
  accessToken: string;
  refreshToken: string;
  sessionId: string;
}

export interface GetUserTokenQuery {
  slugId: string;
}

export interface GetUserTokensResponse {
  tokens: string[];
}

export interface Character {
  id: string;
  characterName: string;
  characterTitle: string;
  level: number;
  exp: number;
  nextLevelExp: number;
}

export interface GetUserFromSlugRequest {
  slugId: string;
}

export interface GetUserFromSlugResponse {
  userId: string;
  slugId: string;
  username: string;
  role: string;
  email: string;
  character: Character | undefined;
}

export interface LogOutRequest {
  userId: string;
  sessionId: string;
  accessToken: string;
}

export interface LogOutResponse {
  isSuccess: boolean;
  message: string;
}

export interface GetUserListFromSlugListRequest {
  slugIds: string[];
}

export interface GetUserListFromSlugListResponse {
  users: GetUserFromSlugResponse[];
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  login(request: LoginRequest): Observable<LoginResponse>;

  logOut(request: LogOutRequest): Observable<LogOutResponse>;

  rotateToken(request: RotateTokenRequest): Observable<RotateTokenResponse>;

  getUserTokens(request: GetUserTokenQuery): Observable<GetUserTokensResponse>;

  registerOtp(request: RegisterOtpRequest): Observable<RegisterOtpResponse>;

  verifyRegisterOtp(request: VerifyRegisterOtpRequest): Observable<VerifyRegisterOtpResponse>;

  getUserFromSlug(request: GetUserFromSlugRequest): Observable<GetUserFromSlugResponse>;

  getListUserInfoFromSlugs(request: GetUserListFromSlugListRequest): Observable<GetUserListFromSlugListResponse>;
}

export interface AuthServiceController {
  login(request: LoginRequest): Promise<LoginResponse> | Observable<LoginResponse> | LoginResponse;

  logOut(request: LogOutRequest): Promise<LogOutResponse> | Observable<LogOutResponse> | LogOutResponse;

  rotateToken(
    request: RotateTokenRequest,
  ): Promise<RotateTokenResponse> | Observable<RotateTokenResponse> | RotateTokenResponse;

  getUserTokens(
    request: GetUserTokenQuery,
  ): Promise<GetUserTokensResponse> | Observable<GetUserTokensResponse> | GetUserTokensResponse;

  registerOtp(
    request: RegisterOtpRequest,
  ): Promise<RegisterOtpResponse> | Observable<RegisterOtpResponse> | RegisterOtpResponse;

  verifyRegisterOtp(
    request: VerifyRegisterOtpRequest,
  ): Promise<VerifyRegisterOtpResponse> | Observable<VerifyRegisterOtpResponse> | VerifyRegisterOtpResponse;

  getUserFromSlug(
    request: GetUserFromSlugRequest,
  ): Promise<GetUserFromSlugResponse> | Observable<GetUserFromSlugResponse> | GetUserFromSlugResponse;

  getListUserInfoFromSlugs(
    request: GetUserListFromSlugListRequest,
  ):
    | Promise<GetUserListFromSlugListResponse>
    | Observable<GetUserListFromSlugListResponse>
    | GetUserListFromSlugListResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "login",
      "logOut",
      "rotateToken",
      "getUserTokens",
      "registerOtp",
      "verifyRegisterOtp",
      "getUserFromSlug",
      "getListUserInfoFromSlugs",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
