// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.20.3
// source: rbac.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "rbac";

export interface UpdateGrantForRoleRequest {
  role: string;
  resource: string;
  actions: string[];
}

export interface UpdateGrantForRoleResponse {
  role: string;
  resource: string;
  actions: string[];
}

export interface DeleteGrantForRoleRequest {
  role: string;
  resource: string;
  actions: string[];
}

export interface DeleteGrantForRoleResponse {
  role: string;
  resource: string;
  actions: string[];
}

export interface CreateRolesRequest {
  role: string;
  description: string;
}

export interface CreateRolesResponse {
  role: string;
  description: string;
}

export interface CreateResourcesRequest {
  resource: string;
  description: string;
}

export interface CreateResourcesResponse {
  resource: string;
  description: string;
}

export interface GrantAccessToRoleRequest {
  role: string;
  resource: string;
  actions: string[];
}

export interface GrantAccessToRoleResponse {
  role: string;
  resource: string;
  actions: string[];
}

export interface PermissionRequest {
  userId: string;
  resource: string;
  action: string;
}

export interface PermissionResponse {
  allowed: boolean;
}

export interface UserPermissionsRequest {
  userId: string;
}

export interface UserPermissionsResponse {
  permissions: Role[];
}

export interface Role {
  resource: string;
  actions: string[];
}

export interface RoleCheckRequest {
  userId: string;
  roleName: string;
}

export interface RoleCheckResponse {
  hasRole: boolean;
}

export const RBAC_PACKAGE_NAME = "rbac";

export interface RBACServiceClient {
  checkPermission(request: PermissionRequest): Observable<PermissionResponse>;

  getUserPermissions(request: UserPermissionsRequest): Observable<UserPermissionsResponse>;

  hasRole(request: RoleCheckRequest): Observable<RoleCheckResponse>;

  createRole(request: CreateRolesRequest): Observable<CreateRolesResponse>;

  createResource(request: CreateResourcesRequest): Observable<CreateResourcesResponse>;

  grantAccessToRole(request: GrantAccessToRoleRequest): Observable<GrantAccessToRoleResponse>;

  updateGrantForRole(request: UpdateGrantForRoleRequest): Observable<UpdateGrantForRoleResponse>;

  deleteGrantForRole(request: DeleteGrantForRoleRequest): Observable<DeleteGrantForRoleResponse>;
}

export interface RBACServiceController {
  checkPermission(
    request: PermissionRequest,
  ): Promise<PermissionResponse> | Observable<PermissionResponse> | PermissionResponse;

  getUserPermissions(
    request: UserPermissionsRequest,
  ): Promise<UserPermissionsResponse> | Observable<UserPermissionsResponse> | UserPermissionsResponse;

  hasRole(request: RoleCheckRequest): Promise<RoleCheckResponse> | Observable<RoleCheckResponse> | RoleCheckResponse;

  createRole(
    request: CreateRolesRequest,
  ): Promise<CreateRolesResponse> | Observable<CreateRolesResponse> | CreateRolesResponse;

  createResource(
    request: CreateResourcesRequest,
  ): Promise<CreateResourcesResponse> | Observable<CreateResourcesResponse> | CreateResourcesResponse;

  grantAccessToRole(
    request: GrantAccessToRoleRequest,
  ): Promise<GrantAccessToRoleResponse> | Observable<GrantAccessToRoleResponse> | GrantAccessToRoleResponse;

  updateGrantForRole(
    request: UpdateGrantForRoleRequest,
  ): Promise<UpdateGrantForRoleResponse> | Observable<UpdateGrantForRoleResponse> | UpdateGrantForRoleResponse;

  deleteGrantForRole(
    request: DeleteGrantForRoleRequest,
  ): Promise<DeleteGrantForRoleResponse> | Observable<DeleteGrantForRoleResponse> | DeleteGrantForRoleResponse;
}

export function RBACServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "checkPermission",
      "getUserPermissions",
      "hasRole",
      "createRole",
      "createResource",
      "grantAccessToRole",
      "updateGrantForRole",
      "deleteGrantForRole",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("RBACService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("RBACService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RBAC_SERVICE_NAME = "RBACService";
